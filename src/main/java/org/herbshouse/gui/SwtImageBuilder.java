package org.herbshouse.gui;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.widgets.Display;
import org.herbshouse.SnowingApplication;
import org.herbshouse.logic.Point2D;
import org.herbshouse.logic.SnowListener;
import org.herbshouse.logic.Snowflake;

import java.util.List;

/**
 * This class is responsible for creating and managing an SWT Image that displays a snowy scene with a greeting text.
 * It utilizes the SWT graphics context (GC) to draw on an image, including a background, text, and snowflakes generated by a SnowGenerator.
 * The class supports flipping the image vertically and includes a debug mode to show the history of snowflake locations.
 * It implements AutoCloseable to ensure proper resource management, disposing of the graphics context, image, and transformation when done.
 *
 * @author cristian.tone
 */
public class SwtImageBuilder implements AutoCloseable {
    private final GC originalGC;
    private GC gcImage;
    private Transform transform;
    private Image image;
    private static int alphaMB = 1;
    private static int alphaMBSign = 1;

    public SwtImageBuilder(GC gc) {
        originalGC = gc;
    }

    public Image createImage(List<SnowListener> listeners, FlagsConfiguration config) {
        Rectangle totalArea = originalGC.getClipping();
        image = new Image(Display.getDefault(), totalArea);
        gcImage = new GC(image);
        gcImage.setAdvanced(true);
        gcImage.setAntialias(SWT.DEFAULT);
        gcImage.setTextAntialias(SWT.ON);

        if (config.isFlipImage()) {
            transform = new Transform(Display.getDefault());
            transform.scale(1, -1);
            transform.translate(0, -totalArea.height);
            gcImage.setTransform(transform);
        }

        //Draw background
        gcImage.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        gcImage.fillRectangle(0, 0, totalArea.width, totalArea.height);

        //Draw text in middle of screen
        gcImage.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_CYAN));
        gcImage.setFont(SWTResourceManager.getFont("Arial", 25, SWT.BOLD));
        String message = "Happy New Year!";
        Point textSize = gcImage.stringExtent(message);
        Rectangle drawingSurface = gcImage.getClipping();
        gcImage.drawText(message, (drawingSurface.width - textSize.x) / 2,
                (drawingSurface.height - textSize.y) / 2, true);

        //Draw countdown
        for (SnowListener snowListener : listeners) {
            if (snowListener.getCountdown() >= 0) {
                if (snowListener.getCountdown() >= 4) {
                    gcImage.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
                } else {
                    gcImage.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
                }
                String countdown = String.valueOf(snowListener.getCountdown());
                Point countdownSize = gcImage.stringExtent(countdown);
                gcImage.drawText(countdown, (drawingSurface.width - countdownSize.x) / 2,
                        drawingSurface.height / 2 + textSize.y, true);
            }
        }

        //Draw legend
        gcImage.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_GREEN));
        gcImage.setFont(SWTResourceManager.getFont("Arial", 12, SWT.BOLD));
        StringBuilder legendBuilder = new StringBuilder();
        this.addTextToLegend(legendBuilder, "Normal wind(space)", config.isNormalWind());
        this.addTextToLegend(legendBuilder, "Happy wind(X)", config.isHappyWind());
        this.addTextToLegend(legendBuilder, "Debug(D)", config.isDebug());
        this.addTextToLegend(legendBuilder, "Flip image(F)", config.isFlipImage());
        this.addTextToLegend(legendBuilder, "Big balls(B)", config.isBigBalls());
        this.addTextToLegend(legendBuilder, "Freeze snowflakes(P)", config.isFreezeSnowflakes());
        this.addTextToLegend(legendBuilder, "Attack mode(A)", config.isAttack());
        this.addTextToLegend(legendBuilder, "Mercedes snowflakes(M)", config.isMercedesSnowflakes());
        this.addTextToLegend(legendBuilder, "Snow level(+/-)", config.getSnowingLevel());
        legendBuilder.append("\r\n-------\n");
        legendBuilder.append("Reset simulation(R)");
        gcImage.drawText(legendBuilder.toString(), totalArea.width - 240, 10, true);

        //Draw snowflakes
        gcImage.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
        gcImage.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_DARK_RED));
        for (SnowListener snowListener : listeners) {
            for (Snowflake snowflake : snowListener.getSnowflakes()) {
                if (config.isMercedesSnowflakes()) {
                    GuiUtils.drawSnowflakeAsMercedes(gcImage, snowflake);
                } else {
                    GuiUtils.drawSnowflake(gcImage, snowflake);
                }
                if (config.isDebug()) {
                    for (Point2D loc : snowflake.getHistoryLocations()) {
                        GuiUtils.drawSnowflake(gcImage, snowflake, loc);
                    }
                }
                if (config.isAttack() && !snowflake.isFreezed()){
                    gcImage.drawLine((int)snowflake.getLocation().x, (int)snowflake.getLocation().y, config.getMouseLocX(), config.getMouseLocY());
                }
            }
        }

        //Draw MB logo
        if (alphaMB >= 240 || alphaMB < 30) {
            alphaMBSign = -alphaMBSign;
            alphaMB = Math.min(alphaMB, 240);
            alphaMB = Math.max(alphaMB, 30);
        }
        gcImage.setAlpha(alphaMB);
        alphaMB = alphaMB + 5 * alphaMBSign;
        Image mbImage = SWTResourceManager.getImage(SnowingApplication.class, "../../mb.png", true);
        gcImage.drawImage(mbImage, 0, 0);
        gcImage.setAlpha(255);

        return image;
    }

    private void addTextToLegend(StringBuilder builder, String text, boolean value) {
        if (!builder.isEmpty()) {
            builder.append("\r\n");
        }
        builder.append(text);
        builder.append(": ");
        builder.append(value ? "ON" : "OFF");
    }

    private void addTextToLegend(StringBuilder builder, String text, int value) {
        if (!builder.isEmpty()) {
            builder.append("\r\n");
        }
        builder.append(text);
        builder.append(": ");
        builder.append(value);
    }

    @Override
    public void close() {
        if (transform != null) {
            transform.dispose();
        }
        gcImage.dispose();
        image.dispose();
    }

}
