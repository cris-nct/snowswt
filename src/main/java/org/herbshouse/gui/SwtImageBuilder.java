package org.herbshouse.gui;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.graphics.Transform;
import org.eclipse.swt.widgets.Display;
import org.herbshouse.logic.Point2D;
import org.herbshouse.logic.SnowGenerator;
import org.herbshouse.logic.Snowflake;

/**
 * This class is responsible for creating and managing an SWT Image that displays a snowy scene with a greeting text.
 * It utilizes the SWT graphics context (GC) to draw on an image, including a background, text, and snowflakes generated by a SnowGenerator.
 * The class supports flipping the image vertically and includes a debug mode to show the history of snowflake locations.
 * It implements AutoCloseable to ensure proper resource management, disposing of the graphics context, image, and transformation when done.
 *
 * @author cristian.tone
 */
public class SwtImageBuilder implements AutoCloseable {
    private final GC originalGC;
    private GC gcImage;
    private Transform transform;
    private Image image;

    public SwtImageBuilder(GC gc) {
        originalGC = gc;
    }

    public Image createImage(SnowGenerator snowGenerator, FlagsConfiguration config) {
        Rectangle totalArea = originalGC.getClipping();
        image = new Image(Display.getDefault(), totalArea);
        gcImage = new GC(image);
        gcImage.setAdvanced(true);
        gcImage.setAntialias(SWT.DEFAULT);
        gcImage.setTextAntialias(SWT.ON);

        if (config.isFlipImage()) {
            transform = new Transform(Display.getDefault());
            transform.scale(1, -1);
            transform.translate(0, -totalArea.height);
            gcImage.setTransform(transform);
        }

        //Draw background
        gcImage.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        gcImage.fillRectangle(0, 0, totalArea.width, totalArea.height);

        //Draw text in middle of screen
        gcImage.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_CYAN));
        gcImage.setFont(SWTResourceManager.getFont("Arial", 25, SWT.BOLD));
        GuiUtils.drawTextInMiddleOfScreen(gcImage, "Happy New Year!");

        //Draw legend
        gcImage.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_GREEN));
        gcImage.setFont(SWTResourceManager.getFont("Arial", 12, SWT.BOLD));
        StringBuilder legendBuilder = new StringBuilder();
        this.addTextToLegend(legendBuilder, "Normal wind(space)", config.isNormalWind());
        this.addTextToLegend(legendBuilder, "Happy wind(X)", config.isHappyWind());
        this.addTextToLegend(legendBuilder, "Debug(D)", config.isDebug());
        this.addTextToLegend(legendBuilder, "Heavy snowing(H)", config.isHeavySnowing());
        this.addTextToLegend(legendBuilder, "Flip image(F)", config.isFlipImage());
        this.addTextToLegend(legendBuilder, "Big balls(B)", config.isBigBalls());
        this.addTextToLegend(legendBuilder, "Freeze snowflakes(P)", config.isFreezeSnowflakes());
        this.addTextToLegend(legendBuilder, "Attack mode(A)", config.isAttack());
        gcImage.drawText(legendBuilder.toString(), totalArea.width - 220, 10, true);

        //Draw snowflakes
        gcImage.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
        for (Snowflake snowflake : snowGenerator.getSnowflakes()) {
            GuiUtils.drawSnowflake(gcImage, snowflake);
            if (config.isDebug()) {
                for (Point2D loc : snowflake.getHistoryLocations()) {
                    GuiUtils.drawSnowflake(gcImage, snowflake, loc);
                }
            }
        }

        return image;
    }

    private void addTextToLegend(StringBuilder builder, String text, boolean value) {
        if (!builder.isEmpty()) {
            builder.append("\r\n");
        }
        builder.append(text);
        builder.append(": ");
        builder.append(value ? "ON" : "OFF");
    }

    @Override
    public void close() {
        if (transform != null) {
            transform.dispose();
        }
        gcImage.dispose();
        image.dispose();
    }

}
