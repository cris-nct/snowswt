# This is a basic workflow that is manually triggered
name: Setup new release workflow
permissions:
  contents: write
  deployments: write
  packages: write

  #permission controls access to the actions and workflows in your repository
  actions: read
  checks: read

  pull-requests: none
  id-token: none
  issues: none
  discussions: none
  pages: none
  repository-projects: none
  security-events: none
  statuses: none

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Release version'
        default: '0.0.0'
        required: true
        type: string

      release_notes:
        description: 'Release notes'
        default: ''
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  CreateRelease:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      TEST: ${{ vars.TEST }}
      token_push: ${{ secrets.PERSONAL_ACCESS_TOKEN_PUSH }}
      GITHUB_TOKEN: ${{ github.token }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell
      - name: List files
        run: ls -la

      - name: Validate input
        run: ./validate_input.sh ${{ inputs.name }}
        env:
          INPUT_VALUE: ${{ inputs.name }}

      - name: Checkout code
        uses: actions/checkout@v4

#      - name: Configure Git
#        run: |
#          git config user.name "Github action"
#          git config user.email "nelucristian2005@gmail.com"
#
#      - name: Set up JDK 22
#        uses: actions/setup-java@v4
#        with:
#          java-version: '22'
#          distribution: 'temurin'
#          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
#          settings-path: ${{ github.workspace }} # location for the settings.xml file
#
#      - name: Increase version
#        run: |
#          mvn versions:set -DnewVersion="${{inputs.name}}"
#          mvn versions:commit
#          echo "Git commit"
#          git commit -a -m "Increased version to ${{inputs.name}}"
#          echo "Git push commits"
#          git push
#
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml
#
#      - name: Publish to GitHub Packages Apache Maven
#        run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
#
#      - name: Setup Tag
#        run: |
#          echo "Create tag"
#          git tag ${{inputs.name}}
#          echo "Git push tag"
#          git push --tags https://crisnct:$token_push@github.com/crisnct/snowswt.git
#
#      - name: Create Release Branch
#        run: |
#          echo "Create release branch"
#          git branch release/${{inputs.name}}
#          git remote set-url origin https://crisnct:$token_push@github.com/crisnct/snowswt.git
#          git push --set-upstream origin release/${{inputs.name}}
#
#      - name: Create Github Release
#        id: create_release
#        uses: actions/create-release@v1
#        with:
#          tag_name: ${{inputs.name}}
#          release_name: Release ${{inputs.name}} SnowSWT
#          commitish: release/${{inputs.name}}
#          body: |
#            Demo for 2D animation capabilities with SWT (Standard Widget Toolkit)
#            Changes in this Release:
#            ${{inputs.release_notes}}
#            Download:
#            https://github.com/crisnct/snowswt/releases/download/${{inputs.name}}/snowswt-${{inputs.name}}-jar-with-dependencies.jar
#            Commits:
#            https://github.com/crisnct/snowswt/commits/${{inputs.name}}
#          draft: false
#          prerelease: false
#
#      - name: Upload Executable Jar
#        id: upload_asset
#        uses: actions/upload-release-asset@v1
#        with:
#          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object,
#          #which include a `upload_url`. See this blog post for more info:
#          #https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_name: snowswt-${{inputs.name}}-jar-with-dependencies.jar
#          asset_path: ./target/snowswt-${{inputs.name}}-jar-with-dependencies.jar
#          asset_label: latest
#          asset_content_type: application/java-archive
